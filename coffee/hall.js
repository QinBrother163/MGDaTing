// Generated by CoffeeScript 1.12.5
var PLATFORM, getJSON;

PLATFORM = 'GD';

getJSON = function(url, cb) {
  var req;
  req = new XMLHttpRequest;
  req.open('GET', url, true);
  req.onreadystatechange = function() {
    var obj;
    if (req.readyState === 4) {
      obj = eval('[' + req.responseText + ']');
      cb(obj[0]);
    }
  };
  req.send(null);
};

getJSON('data/gamelist.json', function(list) {
  var Height, Width, accessGame, activeImgs, btns, curX, curY, findItem, getRequest, j, k, key, keycodes, l, len, len1, len2, lostFocus, moveFocus, normalImgs, offsetLeft, offsetTop, parseStr, ref, ref1, ref2, render, setFocus, switchFocus;
  if (list == null) {
    return;
  }
  offsetTop = 120;
  offsetLeft = 48;
  Width = 5;
  Height = 3;
  curX = Math.floor(Width / 2) + 1;
  curY = Math.floor(Height / 2) + 1;
  keycodes = [37, 38, 39, 40, 13, 8];
  if (PLATFORM === 'GD') {
    ref = [87, 83, 65, 68, 13, 8];
    for (j = 0, len = ref.length; j < len; j++) {
      key = ref[j];
      keycodes.push(key);
    }
  }
  if (PLATFORM === 'GX') {
    ref1 = [38, 40, 37, 39, 13, 48];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      key = ref1[k];
      keycodes.push(key);
    }
  }
  if (PLATFORM === 'HN') {
    ref2 = [65362, 65364, 65361, 65363, 65293, 65367];
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      key = ref2[l];
      keycodes.push(key);
    }
  }
  btns = document.getElementsByClassName('btn');
  normalImgs = ['img/page.png', 'img/return.png', 'img/mall.png'];
  activeImgs = ['img/pages.png', 'img/returns.png', 'img/malls.png'];
  parseStr = function(obj) {
    var arr, i, v;
    arr = [];
    for (v in obj) {
      i = obj[v];
      arr.push(v + '=' + encodeURIComponent(i));
    }
    return arr.join('&');
  };
  getRequest = function() {
    var arr, len3, m, result, search, tmp, v;
    if (!location.search.indexOf('?' === -1)) {
      return {};
    }
    search = location.search.slice(1);
    result = {};
    arr = search.split('&');
    for (m = 0, len3 = arr.length; m < len3; m++) {
      v = arr[m];
      tmp = v.split('=');
      result[tmp[0]] = encodeURIComponent(tmp[1]);
    }
    return result;
  };
  accessGame = function(item) {
    var args;
    args = getRequest();
    args.gameid = item.id;
    args.ts = new Date().getTime();
    args.returnURL = encodeURIComponent(location.href);
    //args.fatherkey = "123456";
    window.location.href = item.url + '?' + parseStr(args);
  };
  render = function(cb) {
    var count, i, img, len3, m, results, val;
    count = 0;
    results = [];
    for (i = m = 0, len3 = list.length; m < len3; i = ++m) {
      val = list[i];
      img = document.createElement('img');
      img.src = val.image;
      img.classList.add('item');
      img.id = 'g' + val.id;
      img.style.left = val.left + offsetLeft + 'px';
      img.style.top = val.top + offsetTop + 'px';
      img.onload = function() {
        count++;
        if (count === list.length) {
          cb(null);
        }
      };
      list[i].node = img;
      results.push(document.body.appendChild(img));
    }
    return results;
  };
  findItem = function(x, y) {
    var item, len3, m, rangeX, rangeY;
    for (m = 0, len3 = list.length; m < len3; m++) {
      item = list[m];
      rangeX = item.x + item.width - 1;
      rangeY = item.y + item.height - 1;
      if ((item.x <= x && x <= rangeX) && (item.y <= y && y <= rangeY)) {
        return item;
      }
    }
    return false;
  };
  setFocus = function(item) {
    var node;
    if (item == null) {
      return;
    }
    node = item.node;
    node.style.left = node.offsetLeft - 24 + 'px';
    node.style.top = node.offsetTop - 24 + 'px';
    node.style.height = node.clientHeight + 48 + 'px';
    node.style.zIndex = 999;
    node.classList.add('focus');
  };
  lostFocus = function(item) {
    var node;
    if (item == null) {
      return;
    }
    node = item.node;
    node.style.left = item.left + offsetLeft + 'px';
    node.style.top = item.top + offsetTop + 'px';
    node.style.height = 'auto';
    node.style.width = 'auto';
    node.style.zIndex = 'auto';
    node.classList.remove('focus');
  };
  switchFocus = function(from, to) {
    lostFocus(from);
    setFocus(to);
  };
  moveFocus = function(x, y) {
    var from, to;
    from = findItem(curX, curY);
    to = findItem(x, y);
    if ((x == null) || (y == null)) {
      return;
    }
    curX = to.x;
    curY = to.y;
    switchFocus(from, to);
  };
  render(function() {
    setFocus(findItem(curX, curY));
    document.onkeydown = function(e) {
      var source;
      if (keycodes.indexOf(e.keyCode) !== -1) {
        e.preventDefault(null);
      }
      source = findItem(curX, curY);
      switch (e.keyCode) {
        case 87:
        case 38:
        case 65362:
          if (curY > 1) {
            moveFocus(curX, curY - 1);
          }
          break;
        case 83:
        case 40:
        case 65364:
          if ((0 < curY && curY < Height - source.height + 1)) {
            moveFocus(curX, curY + source.height);
          }
          break;
        case 65:
        case 37:
        case 65361:
          if (curY !== 0) {
            if (curX > 1) {
              moveFocus(curX - 1, curY);
            }
          }
          break;
        case 68:
        case 39:
        case 65363:
          if (curY !== 0) {
            if (curX < Width) {
              moveFocus(curX + source.width, curY);
            }
          }
          break;
        case 13:
        case 65293:
          accessGame(source);
          break;
        case 8:
        case 48:
          history.back();
      }
    };
  });
});
